" ------------------------------------------------------------
" 1. Vundle
" ------------------------------------------------------------

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" vim-scripts repos
Plugin 'taglist.vim'
Plugin 'winmanager'
"Plugin 'minibufexpl.vim'
Plugin 'a.vim'
Plugin 'The-NERD-Commenter'

" original repos on github
Plugin 'scrooloose/nerdtree'
Plugin 'mhinz/vim-startify'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'acusp/AuthorInfo'
"Plugin 'alpertuna/vim-header'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Raimondi/delimitMate'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'rking/ag.vim'
Plugin 'mileszs/ack.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'python-mode/python-mode'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'luochen1990/rainbow'
Plugin 'mattn/emmet-vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'vimwiki/vimwiki'
Plugin 'mzlogin/vim-markdown-toc'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" ------------------------------------------------------------
" 2. General
" ------------------------------------------------------------

syntax on
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set nu
set backup
set backupext=.bak
set backupdir=~/backup
set scrolloff=3
set laststatus=2
set hls
set incsearch
set ignorecase
set smartcase
set magic
set showmatch
set autoread
set backspace=2
"0 same as “:set backspace=” (Vi compatible)
"1 same as “:set backspace=indent,eol”
"2 same as “:set backspace=indent,eol,start”


" customize shortcuts
"
let mapleader=";"
map <Leader>a ggVG
nnoremap <leader>n :bn<CR>
nnoremap <leader>p :bp<CR>
nnoremap <leader>q :bd<CR>
nmap <leader>ct <esc>:retab<cr>
nnoremap <F2> :set list! list?<CR>
nnoremap <leader>c :cclose<bar>lclose<cr>


" customize commands
"
command Todo Ack! 'TODO|FIXME|XXX'


" customize autocmd
"
autocmd BufWritePre * :StripWhitespace


" customize functions
"
map <F5> :call CompileRun()<CR>
func! CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "! ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! ./%<"
    elseif &filetype == 'go'
        exec "!time go run %"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!java %<"
    elseif &filetype == 'python'
        exec "!time python3 %"
    elseif &filetype == 'sh'
        :!./%
    endif
endfunc

" auto upload skeleton.c file when create a new .c file
augroup Skeleton
    au BufNewFile *.py 0r ~/.vim/skeleton/basic.py
augroup end


" themes
"
colo desert


" file encoding
"
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1
set fileencoding=utf-8


" gui font
"
if has("unix")
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 12
elseif has("win32") || has("win64")
    set guifont=DejaVu_Sans_Mono:h12
elseif has("gui_macvim")
    set guifont=DejaVu_Sans_Mono_for_Powerline:h12
end


" clipboard
"
if has('clipboard')
    if has('unnamedplus')  " When possible use + register for copy-paste
        set clipboard=unnamed,unnamedplus
    else         " On mac and Windows, use * register for copy-paste
        set clipboard=unnamed
    endif
endif

" Allow saving of files as sudo when I forgot to start vim using sudo.
"
cmap w!! w !sudo tee > /dev/null %


" ------------------------------------------------------------
" 3. authorinfo
" ------------------------------------------------------------

let g:vimrc_author='acusp'
let g:vimrc_email='acusp.xu@gmail.com'
let g:vimrc_homepage='https://acusp.info'

nmap <F4> :AuthorInfoDetect<cr>


" ------------------------------------------------------------
" 4. plugin config
" ------------------------------------------------------------

" [ ctags ]
"
set tags=tags;
set autochdir


" [ cscope ]
"
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set csverb
    set cspc=3
    "add any database in current dir
    if filereadable("cscope.out")
        cs add cscope.out
    "else search cscope.out elsewhere
    else
        let cscope_file=findfile("cscope.out",".;")
        let cscope_pre=matchstr(cscope_file,".*/")
        if !empty(cscope_file) && filereadable(cscope_file)
            exe "cs add" cscope_file cscope_pre
        endif
    endif
endif


" [ TagList ]
"
nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_Right_Window=1
let Tlist_File_Fold_Auto_Close=1


" [ NERDTree ]
"
map <F9> :NERDTreeToggle<CR>
let NERDTreeWinSize = 30
let NERDTreeShowBookmarks = 1
let NERDTreeHighlightCursorline = 1
let NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$',
            \ '\.o$', '\.so$', '\.egg$', '^\.git$', '__pycache__', '\.DS_Store' ]
let NERDTreeShowLineNumbers = 1
let NERDTreeAutoCenter = 1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" [ A ]
"
nnoremap <silent> <F12> :A<CR>


" [ YouCompleteMe ]
"
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_cache_omnifunc=0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"
let g:ycm_show_diagnostics_ui = 0
let g:ycm_auto_trigger=0
"
" \y - turn off YCM; \Y - turn on YCM
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>
"
" python
let g:ycm_python_binary_path = 'python3'


" [ vim-airline ]
"
let g:airline_theme="luna"
let g:airline_powerline_fonts = 1
"
" tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 0
"
" whitespace
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
"
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"
" powerline symbols
let g:airline_left_sep = ' '
let g:airline_left_alt_sep = ' '
let g:airline_right_sep = ' '
let g:airline_right_alt_sep = ' '
let g:airline_symbols.branch = ' '
let g:airline_symbols.readonly = ' '
let g:airline_symbols.linenr = ''
"unicode symbols
"let g:airline_left_sep = '▶'
"let g:airline_left_alt_sep = '❯'
"let g:airline_right_sep = '◀'
"let g:airline_right_alt_sep = '❮'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'


" [ delimitMate ]
"
" for python docstring
au FileType python let b:delimitMate_nesting_quotes = ['"']


" [ markdown-preview.vim ]
"
let g:mkdp_path_to_chrome = "google-chrome"
"let g:mkdp_path_to_chrome = "firefox"
"let g:mkdp_path_to_chrome = "open -a Google\\ Chrome"


" [ Syntastic ]
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 3
let g:syntastic_auto_jump = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
" close syntastic checker when copy
nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction


" [ python-mode ]
"
let g:pymode_python = 'python3'
let g:pymode_warnings = 0
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1
let g:pymode_options_colorcolumn = 1
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 10
let g:pymode_indent = 1
let g:pymode_folding = 0
" set document
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
" syntactic check
let g:pymode_lint = 1
let g:pymode_lint_on_write = 0
let g:pymode_lint_on_fly = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
let g:pymode_lint_cwindow = 0
let g:pymode_lint_signs = 0
" run program use python-mode
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>r'
" close debuger
let g:pymode_breakpoint = 0
"let g:pymode_breakpoint_bind = '<leader>b'
let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_show_doc_bind = '<C-c>d'
let g:pymode_rope_regenerate_on_write = 1
" auto completion
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1
let g:pymode_rope_completion_bind = '<leader><Tab>'
" goto
let g:pymode_rope_goto_definition_bind = '<C-c>g'
let g:pymode_rope_goto_definition_cmd = 'vnew'
let g:pymode_rope_rename_bind = '<C-c>rr'
let g:pymode_rope_rename_module_bind = '<C-c>r1r'
" syntax highlight
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all


" [ cpp-enhanced-highlight ]
"
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1


" [ ack.vim ]
"
map <Leader>s :Ack!<Space>
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
let g:ackhighlight = 1
let g:ack_qhandler = "botright copen 15"
let g:ack_autoclose = 1
let g:ack_use_cword_for_empty_search = 1


" [ ctrlp.vim ]
"
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlP'
nmap <Leader>f :CtrlPMRUFiles<CR>
nmap <Leader>b :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_max_height = 15
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_mruf_max = 300
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_regexp = 0
let g:ctrlp_line_prefix = '♪ '
"
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l –nocolor –hidden -g ""'
  let g:ctrlp_use_caching = 0
endif


" [ rainbow ]
"
let g:rainbow_active = 1
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': {
\           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\       },
\       'css': 0,
\   }
\}


" [ emmet-vim ]
"
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall


" [ vim-multiple-cursors ]
"
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'


" [vim-markdown-toc]
"
let g:vmt_cycle_list_item_markers = 1
